<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Speed Trading</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
          .spinner {
            display: none; /* Initially hidden */
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #fff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin-top: 20px; /* Space above spinner */
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        body {
            background-color: #f8f9fa;
            font-family: Arial, sans-serif;
            background-image: url('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTyIB3QeXGbH7WTnj3_pOEP22vQq1leg4Gxdg&s'); 
        }
        .order-confirmation-card {
            background-color: darkblue;
            color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            margin-top: 50px;
            padding: 20px;
        }
        .btn-custom {
            background-color: #28a745;
            color: #fff;
            border: none;
            width: 100%;
        }
        .btn-custom:hover {
            background-color: #218838;
        }
        .error-message {
            color: red;
            margin-top: 10px;
        }
        .success-message {
            color: green;
            margin-top: 10px;
        }

        /* Modal styling */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            width: 300px;
        }
        .circle-timer {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background-color: #4a6cf7;
            color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 32px;
            margin: 20px auto;
        }
        .close-btn {
            cursor: pointer;
            float: right;
            font-size: 18px;
        }
        #go-on-btn {
            background-color: #00c853;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        .hide-content {
            display: none;
        }
    </style>
</head>
<body>
     <!-- Navigation Menu -->
     <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link text-success" href="/profile">Profile</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-success" href="/transaction">Transaction History</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-success" href="/dashboard">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-danger" href="/logout">Logout</a>
                </li>
            </ul>
        </div>
    </nav>
   
    <div class="container">   
        <div id="mainContent" class="row justify-content-center">
            <div class="col-md-6">
                <div class="card order-confirmation-card">
                    <div id="spinner" class="spinner"></div>
                    <div class="card-body">
                        <h5 class="card-title">Order Confirmation</h5>
                        <div id="timer" class="timer"></div>
                        
                        <div class="form-group">
                            <label for="cryptoName">Name</label>
                            <input type="text" class="form-control" id="cryptoName" value="BTC" disabled>
                        </div>
                        <div class="form-group">
                            <label for="direction">Direction</label>
                            <select class="form-control" id="direction">
                                <option value="Buy up">Buy up</option>
                                <option value="Buy down">Buy down</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Choose expiry time</label>
                            <div class="expiry-options">
                                <button class="btn btn-outline-light" onclick="selectExpiry(60)">60S</button>
                                <button class="btn btn-outline-light" onclick="selectExpiry(120)">120S</button>
                            </div>
                            <input type="hidden" id="expiryTime" value="60">
                        </div>
                        <div class="form-group">
                            <label for="quantity">Quantity to buy</label>
                            <input type="number" class="form-control mt-3 input-field" id="quantity" value="">
                        </div>
                        <div class="form-group">
                            <label>Available Balance</label>
                            <span id="availableBalance"><%= user.balance %></span>
                        </div>
                        <div class="form-group">
                            <label>Amount</label>
                            <input type="number" class="form-control" id="totalAmountRequired" value="">
                        </div>
                        <div id="message" class="error-message"></div>
                        <button class="btn btn-custom"  onclick="openModal(),confirmOrder()">Confirm the Order</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="timerModal" class="modal">
            <div class="modal-content">
                <span class="close-btn" onclick="closeModal()">&times;</span>
                <h3 class="text-warning">Processing in</h3>
                <div id="circleTimer" class="circle-timer">60</div>
            </div>
        </div>
    </div>

    <script>
        let timerInterval;

        function openModal() {
            document.getElementById("mainContent").classList.add("hide-content");
            document.getElementById("timerModal").style.display = "flex";
            const expiryTime = parseInt(document.getElementById('expiryTime').value);
            startTimer(expiryTime);
        }

        function closeModal() {
            document.getElementById("mainContent").classList.remove("hide-content");
            document.getElementById("timerModal").style.display = "none";
            clearInterval(timerInterval);
        }

        function startTimer(duration) {
            let time = duration;
            const timerElement = document.getElementById("circleTimer");
            timerElement.textContent = time;

        timerInterval = setInterval(() => {
            time--;
            timerElement.textContent = time;
            if (time <= 0) {
                clearInterval(timerInterval);
                alert("Time's Up,You will be navigated to dashboard");
            }
        }, 1000);
    }

    function selectExpiry(seconds) {
        document.getElementById('expiryTime').value = seconds;
    }



        let userBalance = parseFloat(document.getElementById('availableBalance').innerHTML); // Convert balance to float
        function selectExpiry(seconds) {
            document.getElementById('expiryTime').value = seconds;
            // Optional: Provide feedback to the user
            document.getElementById('message').innerText = `Expiry time set to ${seconds} seconds.`;
        }
        function updateTotalAmount() {
            const totalAmount = document.getElementById('totalAmountRequired').value;
            document.getElementById('totalAmountRequired').value = totalAmount.toFixed(2);
        }

        // Update total amount on page load and whenever quantity changes
        updateTotalAmount();
        document.getElementById("totalAmountRequired").addEventListener("change", updateTotalAmount);

        async function confirmOrder() {      
            const totalCost = document.getElementById('totalAmountRequired').value;

            const messageElement = document.getElementById('message');
            const expiryTime = parseInt(document.getElementById('expiryTime').value);
            const spinner = document.getElementById('spinner');

            messageElement.className = '';
            messageElement.innerText = '';

            if (userBalance < totalCost) {
                // Show error if the balance is insufficient
                messageElement.className = 'error-message';
                messageElement.innerText = 'Insufficient balance to place the order.';
                return;
            }

            // Deduct the order amount from the user's balance
            userBalance -= totalCost;
            document.getElementById('availableBalance').innerText = userBalance + ' INR';

            // Update the backend with the initial investment
            try {
                await updateInvestedAndCurrentAmount(totalCost);
                messageElement.className = 'success-message';
                messageElement.innerText = 'Order successful! Your new balance is ' + userBalance + ' INR.';
                //counter start
                spinner.style.display = 'block';
                startCountdown(expiryTime);
                // Schedule the update to currentAmount after the expiry time
                setTimeout(async () => {
                    const updatedAmount = totalCost * 1.2;
                    await updateCurrentAmount(updatedAmount);
                    messageElement.className = 'success-message';
                    messageElement.innerText = 'Amount updated after expiry time! Current amount is now ' + updatedAmount + ' INR.';
                 }, expiryTime * 1000); // Convert seconds to milliseconds
                  // Hide spinner when timer ends
                setTimeout(() => {
                    spinner.style.display = 'none';
                    window.location.href = '/dashboard';
                }, expiryTime * 1000);
                
            } 
            catch (error) {
                messageElement.className = 'error-message';
                messageElement.innerText = 'Failed to place the order.';
            }   
        }

        function startCountdown(seconds) {

           
            let remainingTime = seconds;

            const timerDisplay = document.getElementById('timer');
            
            const intervalId = setInterval(() => {
                if (remainingTime <= 0) {
                    clearInterval(intervalId);
                    timerDisplay.innerText = "Time's up!";
                    return;
                }
                
                timerDisplay.innerText = `Time remaining: ${remainingTime--} seconds`;
            }, 1000);
        }

        async function updateCurrentAmount(amount) {
            try {
                const response = await fetch('/update-current-amount', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    currentAmount: amount
                }),
            });
            if (!response.ok) {
                throw new Error('Failed to update current amount');
            }
            }
            catch (error) {
                console.error('Error:', error);
                throw error;
            }
        }


        async function updateInvestedAndCurrentAmount(amount) {
            try {
                const response = await fetch('/update-investment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        investedAmount: amount,
                        currentAmount: amount,
                        userBalance: userBalance
                    }),
                });
                if (!response.ok) {
                    throw new Error('Failed to update investment');
                }
            } catch (error) {
                console.error('Error:', error);
                throw error;
            }
        }

    </script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
